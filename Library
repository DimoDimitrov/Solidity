// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;
pragma abicoder v2;

import "./Ownable.sol";

contract Library is Ownable{
    mapping(uint => Book) books;
    mapping(address => string) borrowers;
    mapping(uint => address) participated;
    uint participatedLength = 0;
    uint booksLength = 0;
    bool contained;

    struct Book{
       string name;
       uint copies;
       string id;
    }

    function setBook (Book calldata _book) public onlyOwner {
      for (uint8 i = 0; i < booksLength; i++) {
        if(keccak256(abi.encodePacked(books[i].id)) == keccak256(abi.encodePacked(_book.id))){
          contained = true;
        }
      }
      if(contained == false){
        books[booksLength] = _book;
        booksLength++;
      }
    }

    function changeCopies (string calldata _idInput, uint _copiesInput) public onlyOwner{
      for (uint8 i = 0; i < booksLength; i++) {
            if (keccak256(abi.encodePacked(books[i].id)) == keccak256(abi.encodePacked(_idInput))) {
               books[i].copies = _copiesInput;
            }
      }
    }

    function getBooks () public view returns(Book[] memory){
      Book[] memory ret = new Book[](booksLength);
      for(uint i = 0; i < booksLength; i++){
        require(books[i].copies > 0);
        Book storage book = books[i];
        ret[i] = book;
      }
      return ret;
    }
   
    function borrowBook (string calldata _idInput) public{
       for(uint i = 0; i < booksLength; i++){
          if(keccak256(abi.encodePacked(books[i].id)) == keccak256(abi.encodePacked(_idInput))
            && !(keccak256(abi.encodePacked(borrowers[msg.sender])) == keccak256(abi.encodePacked(_idInput)))){
            borrowers[msg.sender] = books[i].id;
            participated[i] = msg.sender; 
            participatedLength++;
            books[i].copies--;
          }
       }
    }

    function returnBook (string calldata _idInput) public{
      for(uint i = 0; i < booksLength; i++){
          if(keccak256(abi.encodePacked(books[i].id)) == keccak256(abi.encodePacked(_idInput))
          && (keccak256(abi.encodePacked(_idInput)) == keccak256(abi.encodePacked(borrowers[msg.sender])))){
            books[i].copies++;
          }
       }
       delete(borrowers[msg.sender]);
    }

    function getParticipated() public view returns(address[] memory){
      address[] memory part = new address[](participatedLength);
      for(uint i = 0; i < participatedLength; i++){
        part[i] = participated[i];
      }
      return part;
    }
}
