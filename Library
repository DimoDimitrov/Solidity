// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;
pragma abicoder v2;

import "./Ownable.sol";

contract Library is Ownable{
    mapping(uint => Book) books;
    mapping(address => string) borrowers;
    mapping(address => string) participated;
    uint booksLength = 0;

    struct Book{
       string name;
       uint copies;
       string id;
    }

    function setBook (Book calldata _book) public onlyOwner {
      books[booksLength] = _book;
      booksLength++;
    }

    function changeCopies (string calldata _idInput, uint _copiesInput) public onlyOwner{
      for (uint8 i = 0; i < booksLength; i++) {
            if (keccak256(abi.encodePacked(books[i].id)) == keccak256(abi.encodePacked(_idInput))) {
               books[i].copies = _copiesInput;
            }
      }
    }

    function getBooks () public view returns(Book[] memory){
      Book[] memory ret = new Book[](booksLength);
      for(uint i = 0; i < booksLength; i++){
        require(books[i].copies > 0);
        Book storage book = books[i];
        ret[i] = book;
      }
      return ret;
    }
   
    function borrowBook (string calldata _idInput) public{
       for(uint i = 0; i < booksLength; i++){
          if(keccak256(abi.encodePacked(books[i].id)) == keccak256(abi.encodePacked(_idInput))){// and if he alwready borrowed a copy
            borrowers[msg.sender] = books[i].id;
            books[i].copies--;
          }
       }
    }

    function returnBook (string calldata _idInput) public{// Deletes the item from borrowers and ads it to paricipated!
                                                          //copies++
    }

    //Print function for borrowers and participated
}
