// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;
pragma abicoder v2;

import "./Ownable.sol";

contract Library is Ownable{
    mapping(address => string) participated;
    mapping(uint => Book) books;
    mapping(address => string) borowers;
    uint booksLength = 0;

    struct Book{
       string name;
       uint copies;
       string id;
    }

    function addBook (Book calldata _book) public onlyOwner {
      books[booksLength] = _book;
      booksLength++;
    }

    function changeCopies (string calldata _idInput, uint _copiesInput) public onlyOwner{
      for (uint8 i = 0; i < booksLength; i++) {
            if (keccak256(abi.encodePacked(books[i].id)) == keccak256(abi.encodePacked(_idInput))) {
               books[i].copies = _copiesInput;
            }
      }
    }

    function print() public view returns(Book[] memory books){
      Book[] memory ret = new Book[](booksLength); //Costs a lot, and it doesn't work!!! Me not like!
      for(uint i = 0; i < booksLength; i++){
        require(books[i].copies > 0);// Can be written as modifier!
        books[i] = ret[i];
      }
      return ret;
    }
   
    function borrow () public{ //Should add the buyer to the borrowers mappig!
       
    }
}
